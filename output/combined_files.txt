# File: .\dump_py.py

import os

def dump_python_files(directory: str, output_file: str) -> None:
    # Ensure the output directory exists
    os.makedirs(os.path.dirname(output_file), exist_ok=True)

    # Delete the output file if it already exists
    if os.path.exists(output_file):
        os.remove(output_file)

    # Open the output file in write mode
    with open(output_file, 'w', encoding='utf-8') as outfile:
        # Walk through the directory
        for root, dirs, files in os.walk(directory):
            # Exclude the 'vend' directory
            if 'venv' in dirs:
                dirs.remove('venv')  # This prevents os.walk from traversing into 'vend'

            for file in files:
                file_path = os.path.join(root, file)

                # Ignore Python files in the output directory itself
                if file.endswith('.py') and not file_path.startswith(os.path.dirname(output_file)):
                    # Write the file name as a header
                    outfile.write(f"# File: {file_path}\n\n")
                    # Read and write the content of the file
                    with open(file_path, 'r', encoding='utf-8') as infile:
                        outfile.write(infile.read())
                    outfile.write("\n\n")  # Add some space between files

# Specify the directory containing your Python files and the output file
project_directory = '.'  # Current directory
output_directory = os.path.join(os.getcwd(), 'output')
output_file = os.path.join(output_directory, 'combined_files.txt')

# Combine the files
dump_python_files(project_directory, output_file)
print(f"All Python files have been combined into {output_file}")


# File: .\setup.py

from setuptools import setup, find_packages

setup(
    name="cruise-admin",
    version="0.1.0",
    description="CLI tool for managing Auth0 users in the Lindblad Cruise Viewer.",
    author="Mike Broadfoot",
    packages=find_packages(),
    install_requires=[
        "click",
        "requests",
        "boto3",
    ],
    entry_points={
        "console_scripts": [
            "cruise-admin=admin.auth0_cli:cli",
        ],
    },
    python_requires=">=3.8",
    include_package_data=True,
)


# File: .\admin\auth0_cli.py

import click
from admin.auth0_utils import create_user, send_password_reset_email, get_m2m_token, find_user, list_users, delete_user

@click.group()
@click.version_option(version="0.1.0", prog_name="portal-admin")
def cli() -> None:
    """Admin CLI for Auth0 user management"""
    pass

@cli.command()
def invite() -> None:
    """Invite a new user by email"""
    email = click.prompt("📧 Email address", type=str)
    given_name = click.prompt("🧑 Given name", type=str)
    family_name = click.prompt("👪 Family name", type=str)
    

    click.echo("\n🔍 Review the information:")
    click.echo(f"   Email       : {email}")
    click.echo(f"   Given name  : {given_name}")
    click.echo(f"   Family name : {family_name}")

    if not click.confirm("\n✅ Proceed with invitation?"):
        click.echo("❌ Cancelled.")
        return

    click.echo("\n🔐 Requesting token...")
    token = get_m2m_token()

    click.echo("📨 Validating user...")
    user = find_user(email)
    
    if user is None:
        click.echo("📨 Creating user...")
        user = create_user(email, given_name, family_name, token)
    
        click.echo("📨 Sending Invitation...")
        send_password_reset_email(email)

        click.echo("\n✅ Invitation sent successfully!")
        click.echo(f"   User ID: {user.get('user_id')}")
    else:
        click.echo("📨 User Already Exists")

@cli.command()
def list() -> None:
    """List all Auth0 users"""
    list_users()

@cli.command()
def delete() -> None:
    """Delete a user by email address"""
    email = click.prompt("📧 Email address of user to delete", type=str)
    user = find_user(email)

    if not user:
        click.echo("❌ User not found.")
        return

    user_id = user.get("user_id")
    click.echo(f"\n⚠️ About to delete user: {email} ({user_id})")
    if click.confirm("Are you sure you want to proceed?"):
        delete_user(user_id)
    else:
        click.echo("❌ Deletion cancelled.")

if __name__ == "__main__":
    cli()


# File: .\admin\auth0_utils.py

import os
import requests
import secrets
import string
from typing import List
from admin.aws_secrets import inject_env_from_secrets

# Inject secrets from AWS Secrets Manager
inject_env_from_secrets("cruise-finder-secrets")

AUTH0_DOMAIN = os.getenv("AUTH0_DOMAIN")
AUTH0_CLIENT_ID = os.getenv("AUTH0_CLIENT_ID")
AUTH0_CLIENT_SECRET = os.getenv("AUTH0_CLIENT_SECRET")
AUTH0_WEB_CLIENT_ID = os.getenv("AUTH0_WEB_CLIENT_ID")
AUTH0_CONNECTION = os.getenv("AUTH0_CONNECTION", "Username-Password-Authentication")
CLOUD_FRONT_URI = os.getenv("CLOUD_FRONT_URI")


def get_m2m_token() -> str:
    url = f"https://{AUTH0_DOMAIN}/oauth/token"
    payload = {
        "client_id": AUTH0_CLIENT_ID,
        "client_secret": AUTH0_CLIENT_SECRET,
        "audience": f"https://{AUTH0_DOMAIN}/api/v2/",
        "grant_type": "client_credentials",
    }
    resp = requests.post(url, json=payload)
    resp.raise_for_status()
    return resp.json()["access_token"]

def generate_temp_password(length:int=16) -> str:
    chars = string.ascii_letters + string.digits + "!@#$%^&*()-_=+"
    return ''.join(secrets.choice(chars) for _ in range(length))

def create_user(email: str, given_name: str, family_name: str, token: str) -> dict:
    url = f"https://{AUTH0_DOMAIN}/api/v2/users"
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json",
    }
    payload = {
        "email": email,
        "given_name": given_name,
        "family_name": family_name,
        "connection": AUTH0_CONNECTION,
        "email_verified": True,
        "password": generate_temp_password()
    }
    resp = requests.post(url, json=payload, headers=headers)
    if not resp.ok:
        print("❌ Error response from Auth0:")
        print(resp.status_code, resp.text)
        resp.raise_for_status()
    return resp.json()

def send_password_reset_email(email: str, token: str | None = None) -> None:
    url = f"https://{AUTH0_DOMAIN}/dbconnections/change_password"
    payload = {
        "client_id": AUTH0_WEB_CLIENT_ID,
        "email": email,
        "connection": AUTH0_CONNECTION,
        "redirect_uri": os.getenv("REDIRECT_URI")
    }
    headers = {
        "Content-Type": "application/json"
    }

    print("\n📦 Sending password reset email with:")
    print(f"🔗 Endpoint : {url}")
    print(f"📧 Email    : {email}")
    print(f"🔌 Client ID: {AUTH0_CLIENT_ID}")
    print(f"🔗 Connection: {AUTH0_CONNECTION}")

    resp = requests.post(url, json=payload, headers=headers)

    if not resp.ok:
        print("❌ Password reset request failed:")
        print(resp.status_code, resp.text)
        resp.raise_for_status()
    print("📬 Password reset email sent by Auth0!")

def find_user(email: str) -> dict | None:
    """List all users in the Auth0 tenant."""
    token = get_m2m_token()
    url = f"https://{AUTH0_DOMAIN}/api/v2/users?q={email}"
    headers = {
        "Authorization": f"Bearer {token}"
    }
    
    resp = requests.get(url, headers=headers)
    resp.raise_for_status()
    users = resp.json()
    
    return users[0] if users else None
    
def list_users() -> None:
    """List all users in the Auth0 tenant."""
    token = get_m2m_token()
    url = f"https://{AUTH0_DOMAIN}/api/v2/users"
    headers = {
        "Authorization": f"Bearer {token}"
    }

    users = []
    page = 0
    per_page = 50  # max allowed by Auth0 is 100

    while True:
        params = {
            "page": page,
            "per_page": per_page
        }

        resp = requests.get(url, headers=headers, params=params)
        resp.raise_for_status()
        batch = resp.json()

        if not batch:
            break  # No more users

        users.extend(batch)
        page += 1

    print(f"\n👥 Found {len(users)} users:\n")
    for user in users:
        print(f"- {user.get('email')} ({user.get('user_id')})")
    print("")

def delete_user(user_id: str | None) -> None:
    """Delete a user from Auth0 by user ID."""
    token = get_m2m_token()
    url = f"https://{AUTH0_DOMAIN}/api/v2/users/{user_id}"
    headers = {
        "Authorization": f"Bearer {token}"
    }

    resp = requests.delete(url, headers=headers)
    if resp.status_code == 204:
        print(f"🗑️ User {user_id} deleted successfully.")
    else:
        print("❌ Failed to delete user:")
        print(resp.status_code, resp.text)
        resp.raise_for_status()

def get_all_users(token: str) -> List:
    """Returns a list of all Auth0 users."""
    url = f"https://{AUTH0_DOMAIN}/api/v2/users"
    headers = {
        "Authorization": f"Bearer {token}"
    }

    users = []
    page = 0
    per_page = 50

    while True:
        params = {
            "page": page,
            "per_page": per_page
        }

        resp = requests.get(url, headers=headers, params=params)
        resp.raise_for_status()
        batch = resp.json()

        if not batch:
            break

        users.extend(batch)
        page += 1

    return users


# File: .\admin\aws_secrets.py

import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

import boto3
import json
from botocore.exceptions import ClientError

def load_secrets(secret_name: str, region_name: str = "us-west-2") -> dict:
    """Fetches and parses secret JSON from AWS Secrets Manager."""
    session = boto3.session.Session()
    client = session.client(service_name="secretsmanager", region_name=region_name)

    try:
        response = client.get_secret_value(SecretId=secret_name)
        secret_str = response.get("SecretString")
        if not secret_str:
            raise ValueError(f"Secret {secret_name} has no SecretString")
        return json.loads(secret_str)
    except ClientError as e:
        print(f"❌ Error retrieving secret '{secret_name}': {e}")
        raise


def inject_env_from_secrets(secret_name: str, region_name: str = "us-west-2") -> None:
    """Sets secret values as environment variables."""
    secrets = load_secrets(secret_name, region_name)
    for key, value in secrets.items():
        if key not in os.environ:  # Don’t override pre-set vars (e.g., CI/CD)
            os.environ[key] = value


# File: .\admin\__init__.py



